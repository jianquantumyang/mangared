# Generated by Django 4.2.4 on 2023-10-02 12:22

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usr',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=256, unique=True)),
                ('avatar', models.ImageField(default='avatar/default.png', upload_to='avatar/%m/%d/')),
                ('desc', models.TextField()),
                ('created_At', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(choices=[('ADMIN', 'ADMIN'), ('MODERATOR', 'MODERATOR'), ('TRANSLATOR', 'TRANSLATOR'), ('USER', 'USER')], default='USER', max_length=20)),
                ('email_active', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nameChapter', models.CharField(max_length=64)),
                ('tom', models.IntegerField()),
                ('glava', models.IntegerField()),
                ('created_At', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(max_length=64, verbose_name='Country')),
                ('created_At', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Forum',
            fields=[
                ('theme', models.CharField(choices=[('Поиск тайтлов', 'Поиск тайтлов'), ('Поиск команды', 'Поиск команды'), ('Поиск в команду', 'Поиск в команду'), ('Общение', 'Общение'), ('Обсуждение манги', 'Обсуждение манги'), ('Предложения для переводчиков', 'Предложения для переводчиков'), ('Предложения для сайта', 'Предложения для сайта'), ('Баги и проблемы', 'Баги и проблемы')], default='Поиск тайтлов', max_length=32)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('forum_title', models.CharField(max_length=50)),
                ('forum_text', models.TextField()),
                ('created_At', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre', models.CharField(max_length=64, verbose_name='Genre')),
                ('created_At', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Manga',
            fields=[
                ('name_en', models.CharField(max_length=512, verbose_name='Name in english')),
                ('name', models.CharField(max_length=512, verbose_name='Manga_name')),
                ('name_original', models.CharField(max_length=512, verbose_name='manga name in japan')),
                ('status', models.CharField(choices=[('Онгоинг', 'Онгоинг'), ('Завершен', 'Завершен'), ('Анонс', 'Анонс'), ('Заморожен', 'Заморожен')], max_length=16)),
                ('season', models.CharField(choices=[('Зима', 'Зима'), ('Весна', 'Весна'), ('Осень', 'Осень'), ('Лето', 'Лето')], max_length=12)),
                ('year', models.IntegerField(verbose_name='Year Created at')),
                ('created_At', models.DateTimeField(auto_now=True)),
                ('author', models.CharField(max_length=64)),
                ('company', models.CharField(max_length=64)),
                ('description', models.TextField()),
                ('img', models.ImageField(upload_to='mangas/%Y/%m/%d/')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.country')),
                ('genres', models.ManyToManyField(to='api.genre')),
            ],
        ),
        migrations.CreateModel(
            name='WatchedForum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_At', models.DateTimeField(auto_now=True)),
                ('forum', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.forum')),
                ('usr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Watched',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_At', models.DateTimeField(auto_now=True)),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.chapter')),
                ('usr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Translater',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_At', models.DateTimeField(auto_now=True)),
                ('manga', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.manga')),
                ('usr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Reading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reading_mode', models.CharField(choices=[('Читаю', 'Читаю'), ('В планах', 'В планах'), ('Прочитано', 'Прочитано'), ('Брошено', 'Брошено'), ('Отложено', 'Отложено')], max_length=20)),
                ('created_At', models.DateTimeField(auto_now=True)),
                ('manga', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.manga')),
                ('usr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Rating_Manga',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(1)])),
                ('manga', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.manga')),
                ('usr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Likes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_At', models.DateTimeField(auto_now=True)),
                ('manga', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.manga')),
                ('usr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='forum',
            name='manga',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.manga'),
        ),
        migrations.AddField(
            model_name='forum',
            name='usr',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Comment2Manga',
            fields=[
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('comment', models.CharField(max_length=256)),
                ('created_At', models.DateTimeField(auto_now=True)),
                ('manga', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.manga')),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='api.comment2manga')),
                ('usr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment2Forum',
            fields=[
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_At', models.DateTimeField(auto_now=True)),
                ('comment', models.CharField(max_length=256)),
                ('forum', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.forum')),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='api.comment2forum')),
                ('usr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment2Chapter',
            fields=[
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('comment', models.CharField(max_length=256)),
                ('created_At', models.DateTimeField(auto_now=True)),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.chapter')),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='api.comment2chapter')),
                ('usr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ChapterImages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='chimgs/%Y/%m/%d/')),
                ('created_At', models.DateTimeField(auto_now=True)),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.chapter')),
            ],
        ),
        migrations.AddField(
            model_name='chapter',
            name='manga',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.manga'),
        ),
        migrations.AddField(
            model_name='chapter',
            name='translater',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.translater'),
        ),
    ]
